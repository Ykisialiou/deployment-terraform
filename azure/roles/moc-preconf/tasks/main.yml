- name: Basic checks
  fail:
    msg: "You can't set initial_key_count to value more than 12"
  when: initial_key_count>12 or initial_key_count<validator_count or initial_key_convert_count<validator_count or initial_key_count<initial_key_convert_count
  
- name: Ensure deployment playbooks exists on local server
  local_action:
    module: git
    repo: "{{ DEPLOYMENT_PLAYBOOKS }}"
    dest: "{{ playbook_dir }}/deployment-playbooks"
    force: true 
    version: "{{ DEPLOYMENT_PLAYBOOKS_BRANCH }}"
                  
- name: Ensure POA contracts exists on local server
  git:
    repo: "{{ POA_CONSENSUS_CONTRACTS }}"
    dest: "/home/{{ ansible_user }}/poa-network-consensus-contracts"
    force: yes

- name: Create folder that will contain all configs for created network
  file:
    state: directory
    path: "/home/{{ ansible_user }}/{{ NETWORK_NAME }}"

- name: Add solc repo
  become: yes
  apt_repository: 
    repo: ppa:ethereum/ethereum

- name: Install the gpg key for nodejs LTS
  become: yes
  apt_key:
    url: "https://deb.nodesource.com/gpgkey/nodesource.gpg.key"
    state: present

- name: Install the nodejs LTS repos
  become: yes
  apt_repository:
    repo: "deb https://deb.nodesource.com/node_{{ node_version }}.x {{ ansible_distribution_release }} main"
    state: present

- name: Ensure all necessary apts is installed on local machine
  become: yes
  apt:
    update_cache: yes
    name: "{{ item }}"
  with_items:
    - git
    - solc
    - "{{ ansible_python_interpreter.split('/')[-1] }}-pip"
    - nodejs
    - libssl-dev
    
- name: Install latest passlib with pip
  pip: 
    name: "{{ item }}"   
    extra_args: --user
    executable: "{{ ansible_pip }}"
  with_items:
    - passlib
    - pyopenssl
    
- name: Config store for npm modules
  shell: "npm config set prefix /home/{{ ansible_user }}/.npm-packages"
  
- name: Install NPM packages globally
  npm:
    global: yes
    name: npm
    state: latest
    
- name: Make folder for keeping network output variables
  file:
    path: "/home/{{ ansible_user }}/{{ NETWORK_NAME }}/validator-keys"
    state: directory

- name: Autogenerate MOC secret
  shell: "head /dev/urandom | tr -dc A-Za-z0-9 | head -c {{ moc_secret_length }} | tee /home/{{ ansible_user }}/{{ NETWORK_NAME }}/moc_secret"
  args:
    creates: "/home/{{ ansible_user }}/{{ NETWORK_NAME }}/moc_secret"
  when: MOC_SECRET == ""

- name: Download terraform repo
  git:
    repo: "{{ DEPLOYMENT_TERRAFORM }}"
    dest: /home/{{ ansible_user }}/deployment-terraform
    force: true  
    version: "{{ DEPLOYMENT_TERRAFORM_BRANCH }}"

- name: Install reqired NPM modules
  npm:
    path: /home/{{ ansible_user }}/deployment-terraform/helper-scripts/key-generator/ 
    
- name: Set local variable MOC_SECRET
  block:     
    - slurp:
        src: "/home/{{ ansible_user }}/{{ NETWORK_NAME }}/moc_secret"
      register:
        MOC_SECRET_coded
    - set_fact:
         MOC_SECRET: "{{ MOC_SECRET_coded['content'] | b64decode }}"

- name: Generate MOC keypair
  shell: "MOC_SECRET={{ MOC_SECRET }} NETWORK_NAME=/home/{{ ansible_user }}/{{ NETWORK_NAME }}/ node /home/{{ ansible_user }}/deployment-terraform/helper-scripts/key-generator/script.js"
  args:
    creates: "/home/{{ ansible_user }}/{{ NETWORK_NAME }}/moc"
    
- name: Set local variable MOC_ADDRESS
  block:     
    - slurp:
        src: "/home/{{ ansible_user }}/{{ NETWORK_NAME }}/moc"
      register:
        MOC_ADDRESS_coded
    - set_fact:
         MOC_ADDRESS: "{{ MOC_ADDRESS_coded['content'] | b64decode }}"

- name: Autogenerate netstat secret
  shell: "head /dev/urandom | tr -dc A-Za-z0-9 | head -c {{ netstat_secret_length }} | tee /home/{{ ansible_user }}/{{ NETWORK_NAME }}/netstat_secret"
  args:
    creates: "/home/{{ ansible_user }}/{{ NETWORK_NAME }}/netstat_secret"
  when: NETSTATS_SECRET == ""
  
- name: Set local variable NETSTATS_SECRET
  block:     
    - slurp:
        src: "/home/{{ ansible_user }}/{{ NETWORK_NAME }}/netstat_secret"
      register:
        NETSTATS_SECRET_coded
    - set_fact:
         NETSTATS_SECRET: "{{ NETSTATS_SECRET_coded['content'] | b64decode }}"
    
- name: Install reqired NPM modules
  shell: npm install
  args:
    chdir: /home/{{ ansible_user }}/poa-network-consensus-contracts/scripts/  
    
- name: Installing solc if bytecode is not generated (workaround)
  shell: npm install solc
  args:
    creates: "/home/{{ ansible_user }}/{{ NETWORK_NAME }}/bytecode"
    chdir: /home/{{ ansible_user }}/poa-network-consensus-contracts/scripts/  
 
- name: Generate bytecode
  shell: "MASTER_OF_CEREMONY={{ MOC_ADDRESS }} node poa-bytecode.js | tail -n +4 | tee /home/{{ ansible_user }}/{{ NETWORK_NAME }}/bytecode"
  register: bytecode_output
  args:
    creates: "/home/{{ ansible_user }}/{{ NETWORK_NAME }}/bytecode"
    chdir: ./poa-network-consensus-contracts/scripts
  failed_when: "'Error' in bytecode_output.stdout or bytecode_output.stdout|length<1" 
     
- name: Register bytecode variable
  block:     
    - slurp:
        src: "/home/{{ ansible_user }}/{{ NETWORK_NAME }}/bytecode"
      register:
        bytecode_coded 
    - set_fact:
        bytecode: "{{ bytecode_coded['content'] | b64decode | replace('\n', '')  }}"
 
- name: Generate spec.json
  template:
    src: spec.json.j2
    dest: "/home/{{ ansible_user }}/{{ NETWORK_NAME }}/spec.json"
  when: SPEC_ADDRESS == ""
  
- name: Copy spec.json to network folder
  synchronize:
    src: "{{ SPEC_ADDRESS }}"
    dest: "/home/{{ ansible_user }}/{{ NETWORK_NAME }}/spec.json"
  when: SPEC_ADDRESS != ""
    
- name: Check GW certificate file
  stat:
    path: "/home/{{ ansible_user }}/{{ NETWORK_NAME }}/gwcert.pfx"
  register: cert_file_check
  
- name: Autogenerate cert secret
  shell: "head /dev/urandom | tr -dc A-Za-z0-9 | head -c {{ cert_secret_length }} | tee /home/{{ ansible_user }}/{{ NETWORK_NAME }}/cert_secret"
  args:
    creates: "/home/{{ ansible_user }}/{{ NETWORK_NAME }}/cert_secret"
  when: not cert_file_check.stat.exists and bootnode_balanced_count>0
  
- name: Register cert_secret variable
  block:     
    - slurp:
        src: "/home/{{ ansible_user }}/{{ NETWORK_NAME }}/cert_secret"
      register:
        cert_secret_coded 
    - set_fact:
        cert_secret: "{{ cert_secret_coded['content'] | b64decode | replace('\n', '')  }}"
  when: bootnode_balanced_count>0

- name: Generate SSL private key
  openssl_privatekey:
    path: "/home/{{ ansible_user }}/{{ NETWORK_NAME }}/gwcert.key"
    passphrase: "{{ cert_secret }}"
    cipher: aes256
    size: 4096
  when: not cert_file_check.stat.exists and bootnode_balanced_count>0

- name: Generate SSL certificate request
  openssl_csr:
    path: "/home/{{ ansible_user }}/{{ NETWORK_NAME }}/gwcert.csr"
    privatekey_path: "/home/{{ ansible_user }}/{{ NETWORK_NAME }}/gwcert.key"
    privatekey_passphrase: "{{ cert_secret }}"
    common_name: "*.cloudapp.net"
  when: not cert_file_check.stat.exists and bootnode_balanced_count>0

- name: Generate self-signed SSL certificate for gateway
  openssl_certificate:
    path: "/home/{{ ansible_user }}/{{ NETWORK_NAME }}/gwcert.crt"
    provider: selfsigned
    privatekey_path: "/home/{{ ansible_user }}/{{ NETWORK_NAME }}/gwcert.key"
    privatekey_passphrase: "{{ cert_secret }}"
    csr_path: "/home/{{ ansible_user }}/{{ NETWORK_NAME }}/gwcert.csr"
  when: not cert_file_check.stat.exists and bootnode_balanced_count>0
  
- name: Converting CRT to PFX
  shell: "openssl pkcs12 -export -inkey gwcert.key -in gwcert.crt -out gwcert.pfx -passin pass:{{ cert_secret }} -passout pass:{{ cert_secret }}"
  args:
    chdir: "/home/{{ ansible_user }}/{{ NETWORK_NAME }}/"
  when: not cert_file_check.stat.exists and bootnode_balanced_count>0
 
- name: Check nodes certificate file
  stat:
    path: "/home/{{ ansible_user }}/{{ NETWORK_NAME }}/server.crt"
  register: nodes_cert_file_check 
 
- name: Generate SSL private key without password for nodes
  openssl_privatekey:
    path: "/home/{{ ansible_user }}/{{ NETWORK_NAME }}/server.key"
    size: 4096
  when: not nodes_cert_file_check.stat.exists

- name: Generate SSL certificate request
  openssl_csr:
    path: "/home/{{ ansible_user }}/{{ NETWORK_NAME }}/server.csr"
    privatekey_path: "/home/{{ ansible_user }}/{{ NETWORK_NAME }}/server.key"
    common_name: "{{ ansible_host }}"
  when: not nodes_cert_file_check.stat.exists

- name: Generate self-signed SSL certificate
  openssl_certificate:
    path: "/home/{{ ansible_user }}/{{ NETWORK_NAME }}/server.crt"
    provider: selfsigned
    privatekey_path: "/home/{{ ansible_user }}/{{ NETWORK_NAME }}/server.key"
    csr_path: "/home/{{ ansible_user }}/{{ NETWORK_NAME }}/server.csr"
  when: not nodes_cert_file_check.stat.exists
  
- name: Restore default global store for npm modules
  shell: "npm config set prefix /usr"
